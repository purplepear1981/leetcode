class Solution {
    public int minCost(int[] houses, int[][] cost, int m, int n, int target) {
       // if(m==0||n==0||target==0)
        //    return -1;
            
        int[][][] dp=new int[m][target+1][n+1];
        
        int inf=Integer.MAX_VALUE/2;
        for(int i=0;i<m;i++){
            for(int j=0;j<=target;j++){
                for(int k=0;k<=n;k++){
                    dp[i][j][k]=inf;
                }
            }
        }
        
        if(houses[0]!=0){
            dp[0][1][houses[0]]=0;}
        else{
            for(int j=1;j<=n;j++){
            dp[0][1][j]=cost[0][j-1];
            }
        }
        
        int hlength=m;
        int clength=n;
        
       for(int i = 1; i < m; i++) {
          for(int j = 1; j <=target; j++) {
            if (houses[i]!=0){
                int k = houses[i];
                for(int u = 1; u <=n; u++) {
                    if (u == k) 
                        dp[i][j][k] = Math.min(dp[i][j][k],dp[i-1][j][u]);
                    else 
                        dp[i][j][k] = Math.min(dp[i][j][k],dp[i-1][j-1][u]);
                    
                }
            }else {
                for(int k = 1; k <=n; k++) {
                    for(int u = 1; u <=n; u++) {
                        if (k == u) 
                            dp[i][j][k] = Math.min(dp[i][j][k],dp[i-1][j][u]+cost[i][k-1]);
                        else 
                            dp[i][j][k] = Math.min(dp[i][j][k],dp[i-1][j-1][u]+cost[i][k-1]);
                        
                    }
                }
            }
          }
        }
        
        int min=inf;
        
        for(int i=1;i<=n;i++){
            min=Math.min(dp[m-1][target][i],min);
        }
        
        return min==inf?-1:min;
    }
    
    
}
