class Solution {
    public List<Integer> cheapestJump(int[] coins, int maxJump) {
        int n=coins.length;
        int[] pre=new int[n];
        int[] dp=new int[n];
        int[] len=new int[n];
        
        Arrays.fill(dp, Integer.MAX_VALUE);
        Arrays.fill(pre,-1);
        
        dp[0]=0;
        
        for(int i=0;i<n;i++){
            if(coins[i]==-1) continue;
            for(int j=Math.max(0,i-maxJump);j<i;j++){
          // for(int j=i-1;j>=Math.max(0,i-maxJump);j--){
                if(coins[j]==-1) continue;
                else {
                    int tmp=dp[j]+coins[i];
                    
                    if(tmp<dp[i] || (tmp==dp[i] && len[i]<len[j]+1)){
                        dp[i]=tmp;
                        pre[i]=j;
                        len[i]=len[j]+1;
                }
                   
            }
                
        }
    
    
            
        }
        
        List<Integer> res=new ArrayList<>();
        
        for(int i=n-1;i>=0;i=pre[i]) res.add(0,i+1);
          if(res.get(0)!=1) return Collections.emptyList();
          else return res;
        
        
        
    }
}
